
## Overview
This file contains specialized information for AIs, specific to this project.  

##### Package Architecture
```markdown
Description of `packages/` structure in monorepo manta-templates.  The `packages/` directory
contains "framework agnostic" elements that we develop, and that are propagated down to the
individual templates by the copy process (`pnpm copy-packages`, etc).

When working with these files and developing `packages/ui-core, packages/ui-adapters`, and even
`packages/content', we often work inside an individual template such as `templates/react`.
We can work there in the template's `lib/` directory, copy our changes *up* to appropriate
directory in `packages/` once they are good, knowing that these will then be propagated back
*down* to the individual templates by the copy process.

Monorepo Structure:
The monorepo contains core components as well as individual templates, and documentation for
all relevant projects.

I. packages
Contains core components that are propagated to templates by copy-packages script.  There is
no build process and these are not npm packages.  It is a simpler copy method of propagation.

packages/
packages/ui-core/
packages/ui-core/components/{?type}  # components go here, in form/, etc.
packages/ui-adapters/  # adapters for specific frameworks (ex: next.js)

1. Do not create additional hierarchy levels.  
   good: packages/ui-core/components/form/     
   bad:  packages/ui-core/components/form/text/
   
II. templates
Individual templates are contained in templates/, for example templates/react/.  Components
from packages are copied to templates by the copy-packages {template-type} script.  copied
components are placed into template/{template-type}/src/lib.

III. documentation
As described in guides, when developing in monorepo, we do not want to pollute the templates
with the process documentation used to create the template.  Templates are intended for easy
deployment and modification by developer end-users.

1. templates
Project artifacts structure for monorepo development mode.  The structure inside this matches
what is described in the guides for regular development.
{monorepo-root}/project-artifacts/{type}-template/

2. monorepo
The monorepo can also contain its own private guides, which will be found at:
{monorepo-root}/project-guides/private/


IV. process

1. monorepo overview
When developing in monorepo mode, we will almost always be working with packages/ as mentioned
above.  The project manager should select a template to work in (ex: templates/react/).  Modify
and test components in this template (src/lib/{subdirs}).  When initial development is completed
and tested, copy the affected components up to their appropriate location in packages/.  then
commit before running any copy-packages scripts.  This prevents accidental overwrite of the new
development work.


##### Definition of framework-agnostic for manta-templates
For our purposes, framework-agnostic means independent of specific target frameworks such as
Next.js, Astro, Vue, etc.  We may still use React, Tailwind, and Radix in our
framework-agnostic packages area.
```
