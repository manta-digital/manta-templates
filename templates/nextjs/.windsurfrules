Code rules. Apply when working with any project tasks involving code, it's analysis, or its design. General rules (`project-documents/project-guides/coderules/`) apply unless superseded by a more detailed ruleset (`project-documents/project-guides/{target-platform}/coderules`) is present.

Project Structure

- If the first item in a list or sublist is `enabled: false`, ignore that section.
- Always refer to `guide.ai-project.process` and follow links as appropriate.
- For UI/UX tasks, always refer to `guide.ui-development.ai`.
- General Project guidance is in `/project-documents/project-guides/`.
- Relevant 3rd party tool and tech information is in `project-document/tool-guides`.
- Information and tasks specific to our project in `project-documents/our-project`.
- CLEAN TEMPLATE: This template ships clean. Run `npm run setup-guides` to populate project-documents/ and examples/our-project/ with guides and development artifacts.

MCP (Model Context Protocol)
- always use context7 (if available) to locate current relevant documentation for specific 
  technologies or tools in use.  
- do not use smithery Toolbox (toolbox) for general tasks.  project manager will guide
  its use.

Code Structure

- Keep source files to max 300 lines (excluding whitespace) when possible.
- Keep functions & methods to max 50 lines (excluding whitespace) when possible.
- Avoid hard-coded constants - declare a constant.
- Avoid hard-coded and duplicated values -- factor them into common object(s).
- Provide meaningful but concise comments in _relevant_ places.

Code Style

- Use `eslint` unless directed otherwise.
- Use `prettier` if working in languages it supports.

Components & Naming

- Use functional components with `"use client"` if needed.
- Name in PascalCase under `src/components/`.
- Keep them small, typed with interfaces.
- React, Tailwind, and ShadCN are all available as needed.
- Use Tailwind for common UI components like textarea, button, etc.
- If we are using ShadCN in the project already, use it.

Next.js Structure

- Use App Router in `app/`. Server components by default, `"use client"` for client logic.
- NextAuth + Prisma for auth. `.env` for secrets.
- Skip auth unless and until it is needed.

Prisma
- enabled: as needed only (default: false)
- Manage DB logic with Prisma in `prisma/schema.prisma`, `src/lib/db.ts`.
- snake_case table → camelCase fields.

File & Folder Names
- Next.js routes in kebab-case (e.g. `app/dashboard/page.tsx`).
- Shared types in `src/lib/types.ts`.
- Sort imports (external → internal → sibling → styles).
- Filenames for project documents may use ` ` or `-` separators. Ignore case in all filenames, titles, and non-code content.

Additional
- Keep code short; commits semantic.
- Reusable logic in `src/lib/utils/shared.ts` or `src/lib/utils/server.ts`.
- Use `tsx` scripts for migrations.

Builds
- `pnpm build` must succeed before PRs.
- Disable `export const runtime = 'edge'` unless strictly necessary.

Sample Content
- Template includes minimal sample content in `examples/sample-content/`
- Users should replace with their own content
- Content structure demonstrates markdown frontmatter patterns
